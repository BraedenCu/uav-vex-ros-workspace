// Generated by gencpp from file vexai/Encoder.msg
// DO NOT EDIT!


#ifndef VEXAI_MESSAGE_ENCODER_H
#define VEXAI_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vexai
{
template <class ContainerAllocator>
struct Encoder_
{
  typedef Encoder_<ContainerAllocator> Type;

  Encoder_()
    : leftEncoderData(0.0)
    , rightEncoderData(0.0)  {
    }
  Encoder_(const ContainerAllocator& _alloc)
    : leftEncoderData(0.0)
    , rightEncoderData(0.0)  {
  (void)_alloc;
    }



   typedef float _leftEncoderData_type;
  _leftEncoderData_type leftEncoderData;

   typedef float _rightEncoderData_type;
  _rightEncoderData_type rightEncoderData;





  typedef boost::shared_ptr< ::vexai::Encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vexai::Encoder_<ContainerAllocator> const> ConstPtr;

}; // struct Encoder_

typedef ::vexai::Encoder_<std::allocator<void> > Encoder;

typedef boost::shared_ptr< ::vexai::Encoder > EncoderPtr;
typedef boost::shared_ptr< ::vexai::Encoder const> EncoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vexai::Encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vexai::Encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vexai::Encoder_<ContainerAllocator1> & lhs, const ::vexai::Encoder_<ContainerAllocator2> & rhs)
{
  return lhs.leftEncoderData == rhs.leftEncoderData &&
    lhs.rightEncoderData == rhs.rightEncoderData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vexai::Encoder_<ContainerAllocator1> & lhs, const ::vexai::Encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vexai

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vexai::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vexai::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vexai::Encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vexai::Encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vexai::Encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vexai::Encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vexai::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd234730d2f0cac98804ac6dd70ae1ef";
  }

  static const char* value(const ::vexai::Encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd234730d2f0cac9ULL;
  static const uint64_t static_value2 = 0x8804ac6dd70ae1efULL;
};

template<class ContainerAllocator>
struct DataType< ::vexai::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vexai/Encoder";
  }

  static const char* value(const ::vexai::Encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vexai::Encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 leftEncoderData\n"
"float32 rightEncoderData\n"
;
  }

  static const char* value(const ::vexai::Encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vexai::Encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftEncoderData);
      stream.next(m.rightEncoderData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vexai::Encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vexai::Encoder_<ContainerAllocator>& v)
  {
    s << indent << "leftEncoderData: ";
    Printer<float>::stream(s, indent + "  ", v.leftEncoderData);
    s << indent << "rightEncoderData: ";
    Printer<float>::stream(s, indent + "  ", v.rightEncoderData);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEXAI_MESSAGE_ENCODER_H
