// Generated by gencpp from file esp32communication/imu.msg
// DO NOT EDIT!


#ifndef ESP32COMMUNICATION_MESSAGE_IMU_H
#define ESP32COMMUNICATION_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace esp32communication
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : test(0)  {
    }
  imu_(const ContainerAllocator& _alloc)
    : test(0)  {
  (void)_alloc;
    }



   typedef int32_t _test_type;
  _test_type test;





  typedef boost::shared_ptr< ::esp32communication::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::esp32communication::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::esp32communication::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::esp32communication::imu > imuPtr;
typedef boost::shared_ptr< ::esp32communication::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::esp32communication::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::esp32communication::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::esp32communication::imu_<ContainerAllocator1> & lhs, const ::esp32communication::imu_<ContainerAllocator2> & rhs)
{
  return lhs.test == rhs.test;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::esp32communication::imu_<ContainerAllocator1> & lhs, const ::esp32communication::imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace esp32communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::esp32communication::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::esp32communication::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esp32communication::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esp32communication::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esp32communication::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esp32communication::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::esp32communication::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a42765ab4d844eca8833047e4d8c65ee";
  }

  static const char* value(const ::esp32communication::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa42765ab4d844ecaULL;
  static const uint64_t static_value2 = 0x8833047e4d8c65eeULL;
};

template<class ContainerAllocator>
struct DataType< ::esp32communication::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "esp32communication/imu";
  }

  static const char* value(const ::esp32communication::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::esp32communication::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 test\n"
;
  }

  static const char* value(const ::esp32communication::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::esp32communication::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::esp32communication::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::esp32communication::imu_<ContainerAllocator>& v)
  {
    s << indent << "test: ";
    Printer<int32_t>::stream(s, indent + "  ", v.test);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESP32COMMUNICATION_MESSAGE_IMU_H
