// Generated by gencpp from file esp32communication/canRequest.msg
// DO NOT EDIT!


#ifndef ESP32COMMUNICATION_MESSAGE_CANREQUEST_H
#define ESP32COMMUNICATION_MESSAGE_CANREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace esp32communication
{
template <class ContainerAllocator>
struct canRequest_
{
  typedef canRequest_<ContainerAllocator> Type;

  canRequest_()
    : canid(0)
    , message(0.0)  {
    }
  canRequest_(const ContainerAllocator& _alloc)
    : canid(0)
    , message(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _canid_type;
  _canid_type canid;

   typedef float _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::esp32communication::canRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::esp32communication::canRequest_<ContainerAllocator> const> ConstPtr;

}; // struct canRequest_

typedef ::esp32communication::canRequest_<std::allocator<void> > canRequest;

typedef boost::shared_ptr< ::esp32communication::canRequest > canRequestPtr;
typedef boost::shared_ptr< ::esp32communication::canRequest const> canRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::esp32communication::canRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::esp32communication::canRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::esp32communication::canRequest_<ContainerAllocator1> & lhs, const ::esp32communication::canRequest_<ContainerAllocator2> & rhs)
{
  return lhs.canid == rhs.canid &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::esp32communication::canRequest_<ContainerAllocator1> & lhs, const ::esp32communication::canRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace esp32communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::esp32communication::canRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::esp32communication::canRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esp32communication::canRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esp32communication::canRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esp32communication::canRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esp32communication::canRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::esp32communication::canRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f266748c68305db13f58466a80a3e23b";
  }

  static const char* value(const ::esp32communication::canRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf266748c68305db1ULL;
  static const uint64_t static_value2 = 0x3f58466a80a3e23bULL;
};

template<class ContainerAllocator>
struct DataType< ::esp32communication::canRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "esp32communication/canRequest";
  }

  static const char* value(const ::esp32communication::canRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::esp32communication::canRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 canid\n"
"float32 message\n"
;
  }

  static const char* value(const ::esp32communication::canRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::esp32communication::canRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.canid);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct canRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::esp32communication::canRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::esp32communication::canRequest_<ContainerAllocator>& v)
  {
    s << indent << "canid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.canid);
    s << indent << "message: ";
    Printer<float>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESP32COMMUNICATION_MESSAGE_CANREQUEST_H
